hey guys

This package is very experimental!

----------------------------
	Bugs
----------------------------

Please report any bug you found to bugs@moonlake.de
or create an issue at http://github.com/bmario/nfs-mount/issues


----------------------------
	License
----------------------------
so, now to the good things :)

it's all gpl, so see:

Copyright 2008-2009 Mario Bielert <mario@moonlake.de>

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
MA 02110-1301, USA.

----------------------------
WHAT YOU NEED:
----------------------------

- some know-how about NFS
- a running Nfs-server with some shares
- the Avahi-daemon and the Python
- lot of time and coffee :)

----------------------------
INSTALLATION:
----------------------------
(this works at least for Debian Lenny 5.0 amd64, other arches or Distribution should work similar)

0. get root privileges :)

----------------------------
1. Nfs-mount-browser
----------------------------

This is the daemon part for clients.
It scans the network over Avahi (uses Dbus) for any exported Nfs shares.
Also this daemon provides information, which uses the client applet.
Also this deamon mounts the shares, so it will need root rights!

My advice is, to install the deamon as a service.
For debian based just run: src/nfs-mount-browser/install.sh
After that you should restart your system (or restart dbus).

Note: you will need the packages python-avahi, python-dbus, nfs-common, avahi-daemon

----------------------------
2. Nfs-mount-systray
----------------------------

This is a little gnome/gtk app placed in the systray, which allows mounting and browsing
known shares. It uses DBus to communicate with the Nfs-mount-browser.

Short usage description:

Use rigthclick to open the menu.
Then you'll see a list of published shares. The little cabel-icon signals,
whether the share is mounted or not. With a click on an entry, you can toggle
the mount-state of the selected share. With hovering over the "!"-icon,
you get a tooltip, which provides extra-information about the share.
"Quit" closes the applet.
(If you have any good ideas, what a leftclick should do, let me know :))

To install it, run: src/nfs-mount-systray/install.sh
This install script also creates an autostart for the applet, please let me know,
if this works well for you. (Maybe some XFCE users have problems?)

If the nfs-mount-browser crashes or you restart the deamon, the applet will crash.
 
Note: you will need the packages python-avahi, python-dbus, avahi-daemon

----------------------------
3. Nfs-mount-exporter
----------------------------

This is the deamon for servers, which exports your nfs-exports on the server over Avahi.
It reads /etc/exports an then publishes your shares over avahi.

Run src/nfs-mount-exporter/install.sh
Remember to restart this daemon after you changed your exports.

Note: you will need the package nfs-kernel-server, avahi-daemon, python-dbus, python-avahi

----------------------------
DOCUMENTATION
----------------------------

at this point here is just a short list of dbus doc for the nfsmount-browser deamon:

busname "de.moonlake.nfsmount"
objectpath "/de/moonlake/nfsmount"

signals:

    newShare    (string share) - Called when a new Share is found 
    removeShare (string share) - Called when a known Share gets offline. (At this point mounted shares will be unmounted automaticly and if share was mounted, also unmountedShare() is triggered)
    mountedShare(string share) - Called when a share is mounted succesful
    unmountedShare(string share) - Called when a share is unmounted successful
    
methods:

    getShareList()               - returns a list of founded shares
    getMountList()               - returns a list of mounted shares (allways this is a part of getShareList())
    getShareInfo(string share)   - returns a list with [name, host, address, port, path] of the given share
    isShareMounted(string share) - returns a boolean whether given share is mounted or not
    mountShare(share)            - mounts a given share (if success, signal mountedShare() is called)
    unmountShare(share)          - unmounts a given share (if success, signal unmountedShare() is called)
    
so far.

please send me some feedback :)

mario bielert
